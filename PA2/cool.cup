/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal Program program;
nonterminal Classes class_list;
nonterminal Class_ class;
nonterminal Features dummy_feature_list;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formals;
nonterminal Formals formal_args;
nonterminal Formal arg;
nonterminal Expressions formalp;
nonterminal Expressions params;
nonterminal Expression expr;
nonterminal Expressions block;
nonterminal Expression let_rule;
nonterminal let single_let;
nonterminal let multi_let;
nonterminal Case single_case;
nonterminal Cases case_list;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence right NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence nonassoc ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= //empty
	{: RESULT = new Features(curr_lineno()); :}
	| feature_list:fl
	{: RESULT = fl; :}
	;	

feature_list
	::= feature:f SEMI
	{: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	| feature_list:fl feature:f SEMI
	{: RESULT = fl.appendElement(f); :}
	;

feature
	::= OBJECTID:o LPAREN formals:fs RPAREN COLON TYPEID:t LBRACE expr:e RBRACE
	{: RESULT = new method(curr_lineno(), o, fs, t, e); :}
	| OBJECTID:o COLON TYPEID:t ASSIGN expr:e
	{: RESULT = new attr(curr_lineno(), o, t, e); :}
	| OBJECTID:o COLON TYPEID:t
	{: RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); :}
	| error
	;

/*formal can be empty*/
formals
	::= //empty
	{: RESULT = new Formals(curr_lineno()); :}
	| formal_args: fl
	{: RESULT = fl; :}
	;

formal_args
	::= arg:fc
	{: RESULT = (new Formals(curr_lineno())).appendElement(fc); :}
	| formal_args:fl COMMA arg:fc
	{: RESULT = fl.appendElement(fc); :}
	;

arg
	::= OBJECTID:o COLON TYPEID:t
	{: RESULT = new  formalc(curr_lineno(), o, t); :}	
	;

expr
	::= OBJECTID:o ASSIGN expr:e
	{: RESULT = new assign(curr_lineno(), o, e); :}
	| OBJECTID:o ASSIGN error
	| expr:e DOT OBJECTID:o LPAREN formalp:pl RPAREN
	{: RESULT = new dispatch(curr_lineno(), e, o, pl); :}
	| expr:e AT TYPEID:t DOT OBJECTID:o LPAREN formalp:pl RPAREN
	{: RESULT = new static_dispatch(curr_lineno(), e, t, o, pl); :}
	| OBJECTID:n LPAREN formalp:pl RPAREN
	{: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), n, pl); :}
	| IF expr:c THEN expr:t ELSE expr:e FI
	{: RESULT = new cond(curr_lineno(), c, t, e); :}
	| WHILE expr:c LOOP expr:s POOL
	{: RESULT = new loop(curr_lineno(), c, s); :}
	| LBRACE block:b RBRACE
	{: RESULT = new block(curr_lineno(), b); :}
	//| LBRACE error RBRACE
	| let_rule:lr
	{: RESULT = lr; :}
	| CASE expr:e OF case_list:cl ESAC
	{: RESULT = new typcase(curr_lineno(), e, cl); :}
	| NEW TYPEID:t
	{: RESULT = new new_(curr_lineno(), t); :}
	| ISVOID expr:e
	{: RESULT = new isvoid(curr_lineno(), e); :}
	| expr:e1 PLUS expr:e2
	{: RESULT = new plus(curr_lineno(), e1, e2); :}
	| expr:e1 MINUS expr:e2
	{:  RESULT = new sub(curr_lineno(), e1, e2); :}
	| expr:e1 MULT expr:e2
	{: RESULT = new mul(curr_lineno(), e1, e2); :}
	| expr:e1 DIV expr:e2
	{: RESULT = new divide(curr_lineno(), e1, e2); :}
	| NEG expr:e
	{: RESULT = new neg(curr_lineno(), e); :}
	| expr:e1 LT expr:e2
	{: RESULT = new lt(curr_lineno(), e1, e2); :}
	| expr:e1 LE expr:e2
	{: RESULT = new leq(curr_lineno(), e1, e2); :}
	| expr:e1 EQ expr:e2
	{: RESULT = new eq(curr_lineno(), e1, e2); :}
	| NOT expr:e
	{: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
	{: RESULT = e; :}
	| OBJECTID:o
	{: RESULT = new object(curr_lineno(), o); :}
	| INT_CONST:i
	{: RESULT = new int_const(curr_lineno(), i); :}
	| STR_CONST:s
	{: RESULT = new string_const(curr_lineno(), s); :}
	| BOOL_CONST:b
	{: RESULT = new bool_const(curr_lineno(), b); :}
	;

formalp
	::= //empty
	{: RESULT = new Expressions(curr_lineno()); :}
	| params: p
	{: RESULT = p; :}
	;

params
	::= expr: e
	{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| params:pl COMMA expr:e
	{: RESULT = pl.appendElement(e); :}
	;

let_rule
	::= LET multi_let:ml IN expr:e
	{: /*sl.body = e;
	   ml.body = sl;*/
	   Expression body = ml.body;
	   let l = ml;
	   while(body instanceof let) { l = ((let)body); body = l.body; }
	   if(l != null) l.body = e;
	   RESULT = ml;
	 :}
	| LET error IN expr
	;

single_let
	::= OBJECTID:o COLON TYPEID:t
	{: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), new no_expr(curr_lineno())); :}
	| OBJECTID:o COLON TYPEID:t ASSIGN expr:e
	{: RESULT = new let(curr_lineno(), o, t, e, new no_expr(curr_lineno())); :}
	;

multi_let
	::= single_let:sl
	{: RESULT = sl; :}
	| single_let:sl COMMA multi_let:ml 
	{: sl.body = ml;
	   RESULT = sl; :}
	;

single_case
	::= OBJECTID:o COLON TYPEID:t DARROW expr:e SEMI
	{: RESULT = new branch(curr_lineno(), o, t, e); :}
	;

case_list
	::= single_case:s
	{: RESULT =  (new Cases(curr_lineno())).appendElement(s); :}
	| case_list:cl single_case:s
	{: RESULT = cl.appendElement(s); :}
	;

block
	::= expr:e SEMI
	{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| error SEMI
	{: RESULT = (new Expressions(curr_lineno())); :}
	| block:bl expr:e SEMI
	{: RESULT = bl.appendElement(e); :}
	;
